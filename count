#!/usr/bin/env python3
#
# Count things.

import functools
import math
import sys
from optparse import OptionParser

def readlines():
	while True:
		l = sys.stdin.readline()
		if len(l) == 0:
			break

		l = l.strip()
		if len(l) > 0:
			yield l

def humanUnits(b):
	b = float(b)

	if options.human == False:
		return '%2.2f' % (b)

	if b < 1024:
		return '%2.2f b' % (b)

	kb = b / 1024
	if kb < 1024:
		return '%2.2f kb' % (kb)

	mb = kb / 1024
	if mb < 1024:
		return '%2.2f mb' % (mb)

	gb = mb / 1024
	return '%2.2f gb' % (gb)

p = OptionParser()
p.add_option('-t', '--total', dest='total', action='store_true', default=False,
    help='compute the total.')
p.add_option('-m', '--mean', dest='mean', action='store_true', default=False,
    help='compute the mean.')
p.add_option('--stddev', dest='stddev', action='store_true', default=False,
    help='compute the standard deviation.')
p.add_option('--variance', dest='variance', action='store_true', default=False,
    help='compute the variance.')
p.add_option('-M', '--median', dest='median', action='store_true',
    default=False, help='compute the median.')
p.add_option('-k', '--human-readable', dest='human', action='store_true',
    default=False,
    help='display values in human-readable units, assuming values are in bytes.')
p.add_option('-H', '--hist', dest='histogram', action='store', type='int',
    default=0, help='display a histogram with the given number of buckets')
p.add_option('--hist-min', dest='histogram_min', action='store',
    type='float', default=None,
    help='''set the minimum historgram value (default is the smallest value
from the input set)''')
p.add_option('--hist-max', dest='histogram_max', action='store',
    type='float', default=None,
    help='''set the maximum historgram value (default is the largest value
from the input set)''')
p.add_option(
		'-p', '--percentiles', action='store_true', default=False,
		help='display common percentiles')

(options, args) = p.parse_args()

values = []
total = float(0)
count = float(0)
for l in readlines():
	v = float(l)
	total += v
	count = count + 1
	values.append(v)

# Make sure these are always sorted; used by many algorithms
values.sort()

# Display output
if options.total:
	print("total: " + humanUnits(total))

if options.mean:
	print("mean: " + humanUnits(total / count))

if options.median:
	median = 0
	if len(values) > 0:
		median = values[len(values) / 2]
	print("median: " + humanUnits(median))

if options.stddev or options.variance:
	mean = total / count
	var = functools.reduce(
		lambda acc, val: acc + math.pow(val - mean, 2),
		values, 0) / count

	if options.variance:
		print('variance: {:f}'.format(var))

	if options.stddev:
		print('stddev: {:f}'.format(math.sqrt(var)))

if options.histogram > 0:
    minval = options.histogram_min
    if minval == None:
        minval = min(values)

    maxval = options.histogram_max
    if maxval == None:
        maxval = max(values)

    width = (maxval - minval) / options.histogram

    buckets = []
    for i in range(0, options.histogram):
        buckets.append(0)

    for v in values:
        buckets[min(int((v - minval) / width), options.histogram - 1)] += 1

    # A bunch of crazy crap for formatting and printing the histogram

    max_bucket_cnt = max(buckets)
    max_label_len = len('[%d, %d) %d' % (
        int(maxval - width), maxval, max_bucket_cnt))
    hist_length = 80 - max_label_len - len(':')
    hist_width = max_bucket_cnt / float(hist_length)

    for i in range(0, options.histogram):
        lrangewidth = len(str(int((options.histogram - 1) * width + minval)))
        rrangewidth = len(str(int(max(minval + (options.histogram * width), maxval))))

        rstr = '[%-*.*s, %*.*s)' % (
            lrangewidth, lrangewidth, str(int(minval + i * width)),
            rrangewidth, rrangewidth, str(minval + int((i + 1) * width)))
        hist = functools.reduce(
            lambda x, y: x + '#',
            range(0, int(buckets[i] / hist_width)),
            '')

        labelwidth = max_label_len - len(rstr) - 1

        print('%s %*.*s: %s' % (
            	rstr,
            	labelwidth, labelwidth, str(buckets[i]),
            	hist))

if options.percentiles:
	values.sort()

	for p in [10, 25, 50, 75, 95, 99]:
		pv = values[math.floor((count * p) / 100)]
		print('p{}: {}'.format(p, pv))

# vim:ts=4 sw=4 noet
