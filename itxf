#!/bin/env python

import datetime
from getpass import getpass
import imaplib
import logging
from optparse import OptionParser
import os
import ply.lex as lex
import ply.yacc as yacc
from pprint import pformat
import re
import sys
import unittest

# Number of messages to operate on in a single batch
BATCHSZ = 32

# Formats for parsing timestamps
STRPTIME_FORMATS = [
    '%Y-%m-%d',
    '%Y/%m/%d',
    '%m-%d-%Y',
    '%m/%d/%Y',
]

IMAP_MONTHS = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
]


class GmailSearchParser(object):
    '''
    Parser for a subset of the search grammar defined at

        http://support.google.com/mail/bin/answer.py?hl=en&answer=7190
    '''

    tokens = ('FIELD', 'VALUE', 'OR', 'NOT')
    literals = ':-()'
    t_ignore = ' \t'
    precedence = (
        ('left', '('),
        ('right', ')'),
        ('right', 'NOT', 'OR', '-'))

    def t_OR(self, t):
        r'OR'
        return t

    def t_NOT(self, t):
        r'NOT'
        return t

    def t_FIELD(self, t):
        r'(from|to|cc|bcc|subject|is|before|after|older|newer)'
        return t

    def t_VALUE(self, t):
        r'[a-zA-Z0-9][a-zA-Z0-9@\-\._]*'
        return t

    def t_error(self, t):
        raise Exception('Failed to lex invalid query')

    def lexer(self, *args, **kwargs):
        return lex.lex(module=self, *args, **kwargs)

    def p_expr(self, p):
        '''expr : term
                | expr term
                | '-' expr
                | NOT expr
                | '(' expr ')'
                | expr OR expr'''

        if len(p) == 2:                 # term
            p[0] = p[1]
        elif len(p) == 3:
            if p[1] == '-' or \
               p[1] == 'NOT':           # NOT expr
                p[0] = ('NOT',) + p[2]
            else:                       # term expr
                p[0] = p[1] + p[2]
        elif len(p) == 4:
            if p[1] == '(':             # ( expr )
                if len(p[2]) == 1:
                    p[0] = ('(%s)' % p[2],)
                else:
                    p[0] = ('(%s' % p[2][0],)
                    p[0] += p[2][1:-1]
                    p[0] += ('%s)' % p[2][-1],)
            else:                       # expr OR expr
                p[0] = ('OR',) + p[1] + p[3]

    def p_term_field_value(self, p):
        '''term : FIELD ':' VALUE
                | FIELD ':' FIELD'''

        f = p[1].upper()
        v = p[3]

        if f == 'IS':
            v = v.upper()

            if v == 'UNREAD':
                p[0] = ('UNSEEN', )
            else:
                raise Exception('Unsupported query term: is:%s' % v)
        elif f in ('AFTER', 'BEFORE', 'OLDER', 'NEWER'):
            dt = None
            for df in STRPTIME_FORMATS:
                dt = datetime.datetime.strptime(v, df)
                break

            if dt is None:
                raise Exception('Unsupported time/date specification %s' % v)

            v = '{mday}-{mon}-{year}'.format(
                    mday=dt.day,
                    mon=IMAP_MONTHS[dt.month - 1],
                    year=dt.year)

            if f in ('AFTER', 'NEWER'):
                p[0] = ('SINCE', v)
            else:
                p[0] = ('BEFORE', v)
        else:
            p[0] = (f, v)

    def p_error(self, p):
        raise Exception('Failed to parse invalid query: %s' % str(p))

    def parser(self, *args, **kwargs):
        return yacc.yacc(module=self, debug=0, write_tables=0,
            *args, **kwargs)


class GmailSearchParserTestCase(unittest.TestCase):

    def testParseEmailAddress(self):
        self.assertEquals(
            'FROM pgriess@gmail.com',
            ' '.join(self.parse('from:pgriess@gmail.com')))

    def testParseNot(self):
        self.assertEquals(
            'NOT FROM pgriess',
            ' '.join(self.parse('-from:pgriess')))

    def testParseCompound(self):
        self.assertEquals(
            'FROM pgriess TO biff',
            ' '.join(self.parse('from:pgriess to:biff')))

    def testParseOr(self):
        self.assertEquals(
            'OR FROM pgriess TO biff',
            ' '.join(self.parse('from:pgriess OR to:biff')))

    def testParseParens(self):
        self.assertEquals(
            'NOT (OR FROM pgriess TO biff)',
            ' '.join(self.parse('- (from:pgriess OR to:biff)')))

    def testParseBefore(self):
        self.assertEquals(
            'BEFORE 1-Jan-2015',
            ' '.join(self.parse('before:2015-1-1')))

    def parse(self, input):
        gsp = GmailSearchParser()
        p = gsp.parser()
        return p.parse(input=input, lexer=gsp.lexer())


def parse_server_spec(spec, ssl):
    '''
    Return a (host, port) tuple based on parsing the given server string.
    '''

    m = re.match(r'^(?P<host>[\w\.]+)(:(?P<port>\d+))?$', spec)
    assert m, 'invalid server specification: ' + spec

    host = m.group('host')
    if m.group('port'):
        port = int(m.group('port'))
    elif ssl:
        port = 993
    else:
        port = 143

    return host, port


def parse_query_spec(query):
    '''
    Turn a query into an array of IMAP SEARCH arguments.
    '''

    gsp = GmailSearchParser()
    return gsp.parser().parse(input=query, lexer=gsp.lexer())


def search_iter(conn, query):
    '''
    Iterator that executes a query on the given IMAP connection and yields
    (folder, uid) pairs.
    '''

    # Get a set of all of the folder names in the account
    folders = set()
    rc, data = conn.list()
    assert rc == 'OK'
    for d in data:
        m = re.match(
            r'^(?P<attrs>\([^\)]+\)) "(?P<delim>[^"]*)" (?P<name>.*)$', d)
        assert m, 'malformed LIST response: ' + d

        if r'\Noselect' in m.group('attrs'):
            continue

        folders |= set([m.group('name').strip('\t" ')])

    # Execute our query for each of the folders
    for fn in folders:
        logging.info('Searching folder ' + fn)

        conn.select(fn)
        rc, data = conn.uid('SEARCH',
            '(%s)' % ' '.join(parse_query_spec(query)))
        assert rc == 'OK'
        assert len(data) == 1

        if len(data[0]) == 0:
            uids = []
        else:
            uids = data[0].split(' ')

        logging.debug('Matched %d UIDs in folder %s' % (len(uids), fn))
        for uid in uids:
            yield fn, uid


def search_exec(conn, query):
    '''
    Execute a query and return a dictionary mapping folder names to sets of
    UIDs that match the query.
    '''

    uids = {}
    for folder, uid in search_iter(conn, query):
        uids.setdefault(folder, [])
        uids[folder].append(uid)

    return uids


if __name__ == '__main__':
    op = OptionParser(usage='%prog [options] <server>[:<port>] <query>',
        description='''Search for mesasges on the given IMAP server matching
the given Gmail-style search query and then do something with them (e.g. delete
them, move them, etc).''')
    op.add_option('-v', '--verbose', dest='verbosity', action='count',
        default=0, help='increase verbosity; can be used multiple times')
    op.add_option('-s', '--ssl', dest='ssl', action='store_true',
        default=False, help='connect with ssl (default: %default)')
    op.add_option('-u', '--username', dest='username', action='store',
        default=os.getlogin(),
        help='username with which to authenticate (default: %default)')
    op.add_option('-p', '--password', dest='password', action='store',
        default=None,
        help='password with which to authenticate; by deafult, prompt')
    op.add_option('-t', '--tests', dest='tests', action='store_true',
        default=False,
        help='run unit tests; don\'t actually do anything else')
    op.add_option('-D', '--delete', dest='delete', action='store_true',
        default=False,
        help='delete messages')
    op.add_option('-M', '--move', dest='move', action='store', default=None,
        help='move messages to given folder')
    op.add_option('-P', '--print', dest='printUids', action='store_true',
        default=False,
        help='print message UIDs')
    op.add_option('-R', '--read', dest='read', action='store_true',
        default=False,
        help='mark messages as read')

    opts, args = op.parse_args()

    # Set up logging as early as possible
    logging.basicConfig(format='%(message)s', stream=sys.stderr,
        level=logging.ERROR - opts.verbosity * 10)

    if opts.tests:
        unittest.main(argv=['__main__'] + args)
        sys.exit(0)

    try:
        if len(args) < 1:
            op.error('server argument required')
        host, port = parse_server_spec(args.pop(0), opts.ssl)

        if len(args) < 1:
            op.error('query argument required')
        query = args.pop(0)

        if len(args) > 0:
            logging.warning('Ignoring excess arguments')

        if not opts.password:
            opts.password = getpass('Password for %s: ' % opts.username)

        if opts.ssl:
            conn = imaplib.IMAP4_SSL(host, port)
        else:
            conn = imaplib.IMAP4(host, port)

        conn.debug = opts.verbosity
        conn.login(opts.username, opts.password)
        uids = search_exec(conn, query)

        for fn in uids:
            conn.select(fn)

            for i in range(1 + len(uids[fn]) / BATCHSZ):
                msgset = ','.join(uids[fn][i:(i + 1) * BATCHSZ])

                if opts.move:
                    conn.uid('COPY', msgset, opts.move)

                if opts.delete or opts.move:
                    conn.uid('STORE', msgset, '+FLAGS', r'\Deleted')
                    conn.expunge()

                if opts.printUids:
                    for u in msgset.split(','):
                        print '%s: %s' % (fn, u)

                if opts.read:
                    conn.uid('STORE', msgset, '+FLAGS', r'\Seen')

        conn.close()
    except Exception, s:
        logging.error(s)
        sys.exit(1)
